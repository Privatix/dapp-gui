{
    "lang": "English",
    "common": {
        "RefreshAll": "Refresh all",
        "Refresh": "Refresh",
        "Select": "Select",
        "NoResults": "Nothing was found on your request. Please modify the filtering options!"
    },
    "auth/setLanguage": {
        "chooseTheLanguage": "Choose the language",
        "PleaseSelectLanguage": "Please, select your language:"
    },
    "auth/setPassword": {
        "setThePassword": "Set the password to",
        "Password": "Password",
        "Confirmation": "Confirmation",
        "PasswordAndConfirmationAreNotEqual" : "Password and confirmation are not equal!",
        "PasswordLengthMustBe" : "Password length must be at least 8 and at most 24 symbols.",
        "ThePasswordMustBeStrong": "The password must be strong.",
        "InCaseYouLostYourPassword": "In case you lost your password, you lost all your data. It is NOT possible to access your account without a password and there is no forgot my password option here. Do not forget it.",
        "WeWillUseThisPassword" : "We will use this password as a key for encrypting your private key.",
        "WeStoreYourPrivateKeys": "We store your private keys encrypted and <br />in same format as ethereum node"
    },
    "auth/setAccount": {
        "SetTheContractAccount": "Set the contract account of",
        "ForTokenTransfers" : "For token transfers, you need to add your Private Key for address, that holds PRIX",
        "WeRecommendYou" : "We recommend you",
        "createASeparateAccount": "create a separate account",
        "transferToThem": "transfer to them limited amount of PRIX and ETH",
        "useThisSeparateAccount" : "use this separate account in this application",
        "PleaseChooseTheWay": "Please choose the way you want to import Ethereum account",
        "GenerateNew": "Generate new (recommended)",
        "ImportKeyInHex": "Import a Private Key in hex format",
        "ImportFromJSON": "Import from JSON Keystore File"
    },
    "auth/generateKey":{
        "Name": "Name",
        "WhileNextButton": "While next button will be pressed, we will generate a new account.",
        "IfYouLoseThePassword": "If you lose the password you use to encrypt your account, you will not be able to access that account",
        "AccountsNameCantBeEmpty": "Accounts name can't be empty.",
        "SomethingWentWrong": "Something went wrong. Try again later!"
    },
    "auth/importJsonKey":{
        "NoFileChosen": "No file chosen.",
        "PleaseSetThePassword": "Please set the password.",
        "SomethingWentWrong": "Something went wrong. Please, check the file or enter a valid password.",
        "PathToJSONKeystoreFile": "Path to JSON Keystore File",
        "PasswordWillBeUsed": "Password (will be used to decrypt JSON)",
        "MoreInformation": "More information about Ethereum Private Key"
    },
    "auth/importHexKey": {
        "PleaseInputHexRepresentation": "Please, input hex representation of your Private Key for address, that holds PRIX",
        "PrivateKey": "Private key",
        "PrivateKeyMustHave": "Private key must have exactly 64 hex symbols.",
        "SomethingWentWrong": "Something went wrong. Please, check the key."
    },
    "auth/backup": {
        "Backup": "Backup",
        "generateKey": "new key has been successfully generated and registered!",
        "importHexKey": "hex key has been successfully imported and registered!",
        "importJsonKey": "JSON Keystore File has been successfully imported!",
        "PleaseBackupYourAccount": "Please backup your account before start working.",
        "SomeErrorOccured": "Some error occured. Can't save file by specified path.",
        "ToPreventEthereumAddress": "To prevent Ethereum address data lost you need to backup your Private Key in a safe location as a file.",
        "NoteWeEncryptThisFile": "Note: We encrypt this file using your application access password. Don't forget it!",
        "Browse": "Browse"
    },
    "auth/getPrix":{
        "option1": "Option 1:",
        "option2": "Option 2:",
        "intro": "Current software is relying on Ethereum blockchain. All the interactions between service providers and consumers are p2p only, and no third party involved. The bandwidth prices and payments are in token PRIX (ERC20). Some amount of ETH is necessary to cover gas costs. The bandwidth costs may vary.",
        "learnMore": "Learn more",
        "fundYourAccount": "Fund your account with PRIX and ETH to start using the service:",
        "directDeposit": "Direct deposit",
        "transferPRIX": "Transfer PRIX and ETH to the address below (use copy button or QR code).",
        "weRecommend": "We recommend transferring min 0.005 ETH and min 1 PRIX. Learn about price formation <1>here</1>",
        "thisOptionIsGood": "This option is good for users who already have PRIX and ETH. If you didn't, <1>learn how to get them</1>",
        "accountAddress": "Account address/Public Key:",
        "easySwap": "Easy swap",
        "transferPopularCrypto": "Transfer popular crypto to our dedicated exchange and avoid PRIX/ETH acquisition frictions.",
        "weRecommendOption2": "We recommend transferring min $10 of crypto equivalent. <1>Click here to start</1>",
        "thisOptionIsGoodOption2": "This option is good for users who have BTC/LTC/ETH, but didn't have PRIX.",
        "PressButton": "When founds has been transferred, press button \"I did it\".",
        "IdidIt": "I did it",
        "TokensHaveBeenReceived": "Tokens have been received.",
        "WeAreTransferring": "We are transferring them to a service balance (it might take 5-10 min)...",
        "PleaseWait": "Please, wait, sending PRIX and ETH to your account.",
        "AllDonePressFinish": "All done. Press Finish",
        "AllDoneCloseModal": "All done. Close Modal",
        "notEnoughETH": "Oops, PRIX transfer to the Marketplace has been failed: not enough ETH to cover gas costs",
        "Congrats": "Great, PRIX transfer to the Marketpalce has been successfully completed."
    },
    "auth/steps": {
        "Language": "Language",
        "Password": "Password",
        "Import": "Import",
        "Account": "Account",
        "Backup" : "Backup"
    },
    "auth/utils": {
        "Next": "Next",
        "Previous": "Previous",
        "Finish": "Finish"
    },
    "offerings": {
        "CreateAnOffering": "Create an offering"
    },
    "offerings/offerings": {
        "CreateOffering": "Create offering",
        "Offerings": "Offerings",
        "ActiveOfferings": "Active offerings",
        "HistoryOfferings": "History"
    },
    "offerings/createOffering": {
        "Attention": "Attention!",
        "Server": "Server",
        "GeneralInfo": "General info",
        "Name": "Name",
        "serviceNameTitle": "Service name, e.g. VPN",
        "Description": "Description",
        "description": "description",
        "Country": "Country",
        "ChangeCountryHelpText": "For changing country you must go to the <1>Servers</1> page",
        "ChangeCountryHelpTextServers": "Servers",
        "Supply": "Supply",
        "ie": "e.g.",
        "MaximumSupplyOfServices": "Maximum supply of services according to service offerings.",
        "ItRepresentsTheMaximum": "It represents the maximum number of clients that can consume this service offering concurrently.",
        "BillingInfo": "Billing info",
        "UnitType": "Unit type",
        "PricePerMB": "Price per MB",
        "MaxBillingUnitLag": "Max billing unit lag",
        "MaximumPaymentLagInUnits" : "Maximum payment lag in units after which Agent will suspend service usage.",
        "MaxBillingUnitLagHelpLink": "Do not change, if you do not understand <1>how to calculate max. billing unit lag</1>",
        "MinUnits": "Min units",
        "UsedToCalculateMinimumDeposit": "Used to calculate minimum deposit required.",
        "MaxUnits": "Max units",
        "UsedToSpecifyMaximumUnits": "Used to specify maximum units of service that will be supplied. Can be empty. Only unlimited offerings will be shown in client simple mode.",
        "ConnectionInfo": "Connection info",
        "MaxSuspendTime": "Max suspend time",
        "sec": "sec",
        "min": "min",
        "MaximumTimeServiceCan": "Maximum time service can be in Suspended status due to payment lag.",
        "AfterThisTimePeriodService": "After this time period service will be terminated, if no sufficient payment was received.",
        "PeriodIsSpecifiedInMinutes": "Period is specified in minutes. Minimal period - 10 minutes.",
        "MaxInactiveTime": "Max inactive time",
        "MaximumTimeWithoutServiceUsage": "Maximum time without service usage.",
        "AgentWillConsider": "Agent will consider that Client will not use service and stop providing it.",
        "PeriodIsSpecified": "Period is specified in minutes. Minimal period - 10 minutes.",
        "AdditionalParameters": "Additional parameters",
        "MinDownloadMbits": "Min download speed",
        "MinUploadMbits": "Min upload speed",
        "Mbits": "Mbits",
        "PublicationPrice": "Publication price",
        "Account": "Account",
        "ServiceBalance": "Service Balance",
        "Deposit": "Deposit",
        "ThisDepositWillBeLocked": "This deposit will be locked while offering is active.",
        "ToReturnDeposit": "To return deposit close your offering.",
        "CreateAndPublish": "Create and publish",
        "UnitPriceMustBeANumber": "Unit price must be a number.",
        "UnitPriceMustBeMoreThen0": "Unit price must be more then 0.",
        "DepositIsGreaterThenServiceBalance": "Deposit is greater than service balance. Please choose another account or top up the balance.",
        "NotEnoughFunds": "Not enough funds for publish transaction. Please, select another account.",
        "MaximumUnitsMustBeEqual": "Maximum units must be equal or greater then minimum units.",
        "Field": "Field",
        "Field_plural": "Fields",
        "MustBeInteger": "must be integer.",
        "MustBeInteger_plural": "must be integers.",
        "MustBeNumber": "must be number.",
        "MustBeNumber_plural": "must be mumbers.",
        "isRequired": "is required.",
        "isRequired_plural": "are required.",
        "haveZeroValue": "have zero value.",
        "haveZeroValue_plural": "have zero value.",
        "haveNegativeValue": "have negative value.",
        "haveNegativeValue_plural": "have negative value.",
        "cantBeEmpty": "can't be empty.",
        "cantBeEmpty_plural": "can't be empty.",
        "MaxSuspendTimeMustBeMoreOrEquals10Min": "Maximum suspend time must be equals or more than 10 min.",
        "MaxInactiveTimeSecMustBeMoreOrEquals10Min": "Maximum inactive time must be equals or more than 10 min.",
        "unlimited": "unlimited"
    },
    "offerings/offeringTools":{
        "WarningArea": "Warning area",
        "Popup": "Popup",
        "Remove": "Remove",
        "SomethingWentWrong": "Something went wrong. Try again later!",
        "popupInfo": "This operation will notify Clients that your offering is actual, improving your chances for a deal.",
        "popupInfoDisabled": "Until the challenge period has not passed, you won't be able to pop up the offering. The duration of the challenge period is approximately {{min}} min. ({{blocks}} blocks).",
        "popupNotice": "Your popup offering request has been scheduled. After the transaction is approved, the offering request will be processed.",
        "removeInfo": "This operation will permanently remove offering. You will receive your deposit back. Clients will not be able to accept it anymore.",
        "removeInfoDisabled": "Offering can be removed only, if {{blocks}} blocks (~ {{minutes}} minutes) passed after it was created or popped up.",
        "lastAction": "The last action has been performed {{lastAction}} blocks (~ {{lastActionMinutes}} minutes) ago.",
        "lastActionPopup": "The last action has been performed {{lastAction}} blocks ago.",
        "YesPopUpIt": "Yes, pop up it!",
        "YesRemoveIt": "Yes, remove it!",
        "WouldYouLikeToProceed": "Would you like to proceed?",
        "DeleteOfferingRequestProcessing": "Your delete offering request is processing. Please wait.",
        "DeleteOfferingRequestScheduled1": "Your delete offering request was scheduled. After",
        "DeleteOfferingRequestScheduled2": "minutes the offering will be removed."
    },
    "offerings/offeringsList":{
        "Offering": "Offering",
        "ServerInfo": "Server info",
        "Hash": "Hash",
        "ServiceName": "Service name",
        "Server": "Server",
        "Status": "Status",
        "AvailableSupply": "Available supply",
        "Supply": "Supply"
    },
    "products/productsList":{
        "ServersList": "Servers list",
        "Name": "Name",
        "OfferingTemplate": "Offering template",
        "AccessTemplate": "Access template",
        "OfferingCount": "Offering count"
    },
    "products/productItem": {
        "ServerInfo": "Server info"
    },
    "products/productView": {
        "PleaseInsertIPorDNS": "Please, insert IP or DNS only!",
        "Name": "Name",
        "Host": "Host",
        "Country": "Country",
        "Save": "Save",
        "HostWasSuccessfullyUpdated": "Host was successfully updated!",
        "SomethingWentWrong": "Something went wrong. Try again later!"
    },
    "channels/channelsByStatus": {
        "ActiveServices": "Active services",
        "History": "History"
    },
    "channels/channelsList": {
        "AllServices": "All services",
        "Service": "Service",
        "ServerInfo": "Server info"
    },
    "channels/channelView": {
        "GeneralInfo": "General info",
        "Offering": "Offering",
        "Id": "Id:",
        "Server": "Server:",
        "OfferingTd": "Offering:",
        "ContractStatus": "Contract Status:",
        "ServiceStatus": "Service Status:",
        "Usage": "Usage:",
        "Income": "Income:",
        "Deposit": "Deposit:",
        "AccessInfo": "Access info",
        "Country": "Country:",
        "Hostname": "Hostname:",
        "Sessions": "Sessions",
        "YouCanNotUndoThis": "You can’t undo this.",
        "TerminateServiceText": "This operation will terminate service and prevent Clients from using this service.",
        "TerminateServiceAndCloseContract": "This operation will terminate service and close contract. Earnings will be transferred to your account.",
        "WarningArea": "Warning Area",
        "YesTerminateIt": "Yes, terminate it!",
        "AreYouSure": "Are you sure?",
        "TerminateService": "Terminate service",
        "TerminateContract": "Terminate contract"
    },
    "sessions/sessionsList": {
        "TotalStatistics": "Total statistics",
        "TotalUsage": "Total usage",
        "TotalIncome": "Total income",
        "SessionsCount": "Sessions count",
        "DetailedStatistics": "Detailed statistics",
        "ExportToAFile": "Export to a file",
        "SavingSessions": "saving sessions",
        "sessionId": "Session id",
        "channelId": "Channel id",
        "Started": "Started",
        "Stopped": "Stopped",
        "Usage": "Usage",
        "LastUsageTime": "Last usage time",
        "ClientIP": "Client IP",
        "ClientPort": "Client port"
    },
    "header": {
        "Accounts": "Accounts",
        "Help": "Help",
        "Settings": "Settings",
        "SomethingWentWrong": "Something went wrong!"
    },
    "navigation": {
        "Dashboard": "Dashboard",
        "Services": "Services",
        "Active": "Active",
        "History": "History",
        "Sessions": "Sessions",
        "Offerings": "Offerings",
        "Servers": "Servers",
        "Logs": "Logs",
        "ClientDashboard": "Client dashboard",
        "ServiceList": "{{serviceName}} list"
    },
    "topPanel": {
        "ETHBalance": "ETH balance",
        "ExchangeBalance": "Exchange balance",
        "ServiceBalance": "Service balance",
        "ActiveServices": "Active services",
        "Status": "Status",
        "TotalTraffic": "Total traffic"
    },
    "utils/notice": {
        "Error!": "Error!",
        "Attention!": "Attention!",
        "Congratulations!": "Congratulations!"
    },
    "logs/logsList": {
        "LogsHeader": "Logs list",
        "ExportControllerLogsBtn": "Export controller's logs to a file",
        "ExportAllLogsBtn": "Export all logs to a file",
        "LogsFilterFrom": "From:",
        "LogsFilterTo": "To:",
        "LogsFilterTime": "time",
        "LogsSearchPlaceholder": "e.g. failed",
        "NowBtn": "Now",
        "Level": "Level",
        "Date": "Date",
        "Message": "Message",
        "Context": "Context",
        "Stack": "Stack",
        "ShowBtn": "show",
        "StackTrace": "Stack trace:",
        "WarningDateMessage": "Please, don't select logs in more than 5 days. It can take a lot of time!",
        "OSNotDetected": "We can't detect you OS. This function is not available for you!",
        "SavingAllLogs": "Saving all logs",
        "PermissionDenied": "Permission denied. Try to save to another folder with right permissions",
        "UnknownError": "An error occurred while saving the logs",
        "LogsDownloaded": "All logs have been successfully downloaded"
    },
    "logs/logsContext": {
        "Key": "Key",
        "Value": "Value"
    },
    "accounts/accountsList": {
        "Title": "Accounts",
        "CreateBtn": "Create an account",
        "Name": "Name",
        "EthereumAddress": "Ethereum address",
        "ETH": "ETH",
        "ExchangeBalance": "Exchange balance",
        "ServiceBalance": "Service balance",
        "IsDefault": "Is Default",
        "Actions": "Actions",
        "CheckBalanceBtn": "Check balance",
        "BackupBtn": "Backup",
        "BackupSuccessMsg": "Private key successfully saved.",
        "ModalTitle": "Account",
        "RefreshingAccountBalanceMsg": "Refreshing account balance. Please wait 1-2 minutes."
    },
    "accounts/accountView": {
        "ErrorMoreThanZero": "Amount must be more than zero.",
        "ErrorNotEnoughExchangeFunds": " Not enough funds on Exchange balance.",
        "ErrorNotEnoughServiceFunds": " Not enough funds on Service balance.",
        "ErrorNotEnoughPublishFunds": " Not enough funds to publish transaction.",
        "SuccessMessage": "The data was successfully transmitted. Once the transaction will in the blockchain, you will see it in the list below.",
        "GeneralInfo": "General info",
        "Name": "Name:",
        "Address": "Address:",
        "BalanceInfo": "Balance Info",
        "ExchangeBalance": "Exchange balance:",
        "ServiceBalance": "Service balance:",
        "Transfer": "Transfer",
        "TransferBtn": "Transfer",
        "From": "From:",
        "To": "To:",
        "ExchangeBalanceOption": "Exchange balance",
        "ServiceBalanceOption": "Service balance",
        "Amount": "Amount:",
        "TransferConfirmBtn": "Yes, transfer!",
        "TransferSwalTitle": "Are you sure?",
        "TransferSwalTextFromPtcToPsc": "This action will transfer your tokens from Exchange balance to Service balance.",
        "TransferSwalTextFromPscToPtc": "This action will transfer your tokens from Service balance to Exchange balance.",
        "TransferSwalTextPart2": "This operation takes time and gas.",
        "TransferSwalTextPart3": "You can monitor transaction status in the Transaction log."
    },
    "utils/gasRange": {
        "GasPrice": "Gas price",
        "AveragePublicationTimeText": "Average publication time:",
        "AverageAcceptanceTimeText": "Average acceptance time:",
        "AverageTime": "min",
        "MoreInformation": "More information:"
    },
    "transactions/transactionsList": {
        "TransactionLog": "Transaction Log",
        "Date": "Date",
        "EthereumLink": "Ethereum link"
    },
    "confirmPopupSwal": {
        "CancelBtn": "Cancel",
        "AreYouSure": "Are you sure?"
    },
    "client/dashboard/connecting": {
        "AfterTheConnectionIsReady": "After the connection is ready, you can start using the {{serviceName}}.",
        "TheServiceHasAPendingStatus": "The service has a pending status. After the connection is ready, you can start using the {{serviceName}}",
        "TheServiceHasAnActivatingStatus": "The service has an activating status. After the connection is ready, you can start using the {{serviceName}}",
        "TheServiceHasASuspendingStatus": "The service has a suspending status. After connections is suspended, you can resume or terminate it.",
        "TheServiceHasATerminatingStatus": "The service has a terminating status. After the connection is terminated, the contract can also be terminated.",
        "WaitingTimeIsOver": "Waiting time is over. Finish procedure will be called automatically.",
        "FailedToAcceptOffering": "Failed to accept offering. Please, try another one.",
        "Synchronizing": "Synchronizing",
        "YouCanStartUsingService": "You can start using service {{serviceName}}",
        "Connect": "Connect",
        "YesConnectIt": "Yes, connect it!",
        "Pause": "Pause",
        "ThisOperationWillPauseServiceUsage": "This operation will pause {{serviceName}} usage.",
        "ForThisContractMaxSuspendTimeIs": "For this contract, max suspend time is {{minutes}} min.",
        "YesPauseIt": "Yes, pause it!",
        "Remaining": "Remaining",
        "AfterMaxInactivityTimeHasBeenReached": "After max. inactivity time has been reached, \"Finish procedure\" will be called automatically.",
        "Resume": "Resume",
        "YesResumeIt": "Yes, resume it!",
        "CountryAlertInvalid": "The country in the offering doesn't match the country that has been detected on the basis of IP address. IP address {{ip}}",
        "CountryAlertUnknown": "The application won't be able to detect the offering's country. IP address {{ip}}"
    },
    "client/dashboard/start": {
        "StartUsingService": "Start using {{serviceName}}"
    },
    "agent/dashboard": {
        "TotalIncome": "Total income:",
        "RefreshAllBtn": "Refresh all",
        "ActiveServices": "Active services",
        "ActiveOfferings": "Active offerings"
    },
    "client/vpnList": {
        "Availability": "Availability",
        "Block": "Block",
        "Hash": "Hash",
        "Country": "Country",
        "Price": "Price (PRIX/MB)",
        "SupplyTotal": "Supply (total)",
        "AvailableSupply": "Available supply",
        "AcceptOffering": "Accept offering",
        "ShowAllBtn": "show all...",
        "HideBtn": "hide",
        "Search": "search",
        "WaitForDownloading": "Please, wait for downloading....",
        "CurrentlyWeAreDownloading": "Currently, we are downloading {{serviceName}} list.",
        "TakesTimeOnFirstRun": "It takes time only on the first run.",
        "AverageTimeForDownloading": "An average time for downloading ap. 2-5 min.",
        "CheckAvailability": "Check availability",
        "AgentAddress": "Agent address",
        "OfferingHash": "Offering hash",
        "PriceFilter": "Price (PRIX/MB):",
        "From": "from",
        "To": "to",
        "ClearOfferingHashToUseOtherFilters": "You must clear the offering hash field to use other filters",
        "ResetFilters": "Reset filtering"
    },
    "client/acceptOffering": {
        "Accept": "Accept",
        "CanHaveOneServiceConnection": "Note. You can have only one {{serviceName}} connection. To accept another, terminate the current connection.",
        "DepositMustBeMoreThan": "The deposit must be more than",
        "DepositMustBeLessOrEqualThan": "The deposit must be less or equal than",
        "NotEnoughPrixForDeposit": "Not enough PRIXes for deposit. Please, select another account.",
        "NotEnoughToPublishTransaction": "Not enough funds for publish transaction. Please, select another account.",
        "ErrorAcceptingOffering": "Something went wrong. Try to accept another offering!",
        "OfferingAccepted": "Offering accepted!",
        "ServiceInfo": "{{serviceName}} info",
        "Country": "Country:",
        "BillingInfo": "Billing info",
        "PricePerMB": "Price per MB:",
        "ConnectionInfo": "Connection info",
        "MaxInactiveTime": "Max inactive time:",
        "sec": "sec",
        "min": "min",
        "MinUnitsText": "Agent expects to sell at least this amount of service.",
        "MaxUnitsText": "Agent will sell at most this amount of service.",
        "MaxTimeWithoutServiceSmallText": "Maximum time without service usage. Agent will consider that Client will not use service and stop providing it. Period is specified in minutes.",
        "PayInfo": "Pay info:",
        "Account": "Account:",
        "Balance": "Balance:",
        "Deposit": "Deposit:",
        "UnusedPrixWillBeReturnedSmallText": "After the end of using, the unused PRIX will be returned.",
        "AcceptancePrice": "Acceptance Price:",
        "unlimited": "unlimited"
    },
    "client/history": {
        "Service": "Service",
        "of": "of",
        "ContractStatus": "Contract status",
        "ServiceStatus": "Service status",
        "JobStatus": "Job status",
        "Usage": "Usage",
        "CostPRIX": "Cost (PRIX)",
        "LastUsed": "Last used",
        "AwaitForTerminate": "Await for terminate",
        "History": "History"
    },
    "client/serviceView": {
        "CommonInfo": "Common Info",
        "IdTd": "Id:",
        "Offering": "Offering:",
        "ContractStatusTd": "Contract status:",
        "ServiceStatusTd": "Service status:",
        "Transferred": "Transferred:",
        "Cost": "Cost:",
        "Deposit": "Deposit:",
        "LastUsageTime": "Last usage time:",
        "ContractHasBeenTerminated": "The contract has been terminated"
    },
    "client/clientAccessInfo": {
        "AccessInfo": "Access info",
        "ServiceAddress": "Service address:",
        "PaymentAddress": "Payment address:"
    },
    "client/terminateContractBlock": {
        "ToOpenDisputeFinishService": "To open dispute, finish using the service",
        "TerminateContract": "Terminate contract",
        "WarningArea": "Warning Area",
        "RequestFullDepositReturn": "Request full deposit return.",
        "UseIfAgentDoNotCloseContract": "Use only, if Agent doesn’t closes contract for very long time.",
        "YouPayMultipleTransactionFees": "You pay multiple transaction fees.",
        "YesTerminateContract": "Yes, terminate contract!",
        "AreYouSure": "Are you sure?"
    },
    "client/connections/active": {
        "Connection": "Connection",
        "ActiveConnection": "Active Connection:",
        "Offering": "Offering",
        "ContractStatus": "Contract status",
        "ServiceStatus": "Service status",
        "JobStatus": "Job status",
        "Usage": "Usage",
        "CostPRIX": "Cost (PRIX)"
    },
    "client/connections/usage": {
        "of": "of"
    },
    "client/connections/finishServiceButton": {
        "PermanentlyStopUsingService": "Permanently stop using this service.",
        "CanRequestFullDepositReturn": "You can request full deposit return, after service is terminated.",
        "RemainingDepositWillBeReturned": "Remaining deposit will be returned, after Agent closes the contract. Transaction fee is paid by Agent.",
        "Finish": "Finish",
        "YesFinishIt": "Yes, finish it!",
        "AreYouSure": "Are you sure?"
    },
    "client/connections/connection": {
        "Started": "Started",
        "Stopped": "Stopped",
        "Usage": "Usage",
        "CostPRIX": "Cost (PRIX)",
        "LastUsageTime": "Last Usage time",
        "ClientIP": "Client IP",
        "Sessions": "Sessions"
    },
    "client/increaseDepositButton":{
        "ThisOperationWillIncrease": "This operation will increase your {{serviceName}} balance by increasing the deposit.",
        "IncreaseDeposit": "Increase deposit"
    },
    "client/connections/increaseDepositView":{
        "DepositInfo": "Deposit Info",
        "Deposit": "Deposit",
        "IncreaseDeposit": "Increase deposit",
        "WouldYouLikeToProceed": "Would you like to proceed?",
        "IncreaseConfirmBtn": "Yes, increase the deposit!",
        "IncreaseSwalTitle": "Increase deposit",
        "Account": "Account",
        "AddToDeposit": "Add to deposit:",
        "AverageTimeToAddTheDeposit": "Average time to add the deposit:",
        "IncreaseBtn": "Add",
        "SuccessMessage": "Adding deposit successfully initialized!",
        "SomethingWentWrong": "Something went wrong. Try again later!",
        "ErrorNotEnoughPublishFunds": "Not enough funds to publish transaction.",
        "ErrorNotEnoughPRIX": "Not enough PRIX to increase deposit.",
        "MaxUnitsHint": "Maximum for this offering are {{maxUnits}} {{unitName}}. So, you can add not more than {{maxDepositAddValue}} {{unitName}}",
        "ErrorDepositGreaterThanMaxUnits": "You can't add to deposit more, than {{units}} {{unitName}}"
    },
    "electronMenu": {
        "File": "File",
        "Quit": "Quit",
        "Edit": "Edit",
        "Undo": "Undo",
        "Redo": "Redo",
        "Cut": "Cut",
        "Copy": "Copy",
        "Paste": "Paste",
        "PasteAndMatchStyle": "Paste and Match Style",
        "Delete": "Delete",
        "SelectAll": "Select All",
        "View": "View",
        "Reload": "Reload",
        "ForceReload": "Force Reload",
        "ToggleDeveloperTools": "Toggle Developer Tools",
        "ActualSize": "Actual Size",
        "ZoomIn": "Zoom In",
        "ZoomOut": "Zoom Out",
        "ToggleFullScreen": "Toggle Full Screen",
        "Window": "Window",
        "Minimize": "Minimize",
        "Close": "Close",
        "Help": "Help",
        "AboutProject": "About project",
        "Documentation": "Documentation",
        "SearchIssues": "Search issues",
        "CommunityDiscussion": "Community discussion"
    },
    "channels/channelUsage": {
        "of": "of"
    },
    "login": {
        "Login": "Login",
        "LoginTo": "Login to",
        "Password": "Password",
        "AccessDenied": "access denied, possibly wrong password",
        "TryToConnect": "connection attempt ...",
        "PasswordHint1": "Privatix network is completely decentralized. There are no centralized servers that store any personal information, that usually used to restore password, such as your email address.",
        "PasswordHint2": "It is not possible to recover password for your personal wallet.",
        "PasswordHint3": "If you forgot or lost your password, you should re-install application and setup new account.",
        "PasswordHint4": "All data will be lost during re-install."
    },
    "settings": {
        "Success": "Changes has been successfully saved.",
        "Error": "An error occurred while saving. Please check the data entered.",
        "Save": "Save",
        "Settings": "Settings",
        "Name": "Name",
        "Value": "Value",
        "Description": "Description",
        "error_sendremote_Name": "Error reporting",
        "eth_challenge_period_Name": "Challenge period",
        "eth_default_gasprice_Name": "Default gas price",
        "eth_event_blocklimit_Name": "Maximum events blocks",
        "eth_event_freshblocks_Name": "Last events blocks",
        "eth_event_maxretry_Name": "Event processing max retry",
        "eth_max_deposit_Name": "Maximum deposit",
        "eth_min_confirmations_Name": "Ethereum confirmation blocks",
        "system_version_db_Name": "DB version",
        "user_isagent_Name": "User role is agent",
        "eth_event_lastProcessedBlock_Name": "Last processed block",
        "offering_autopopup_Name": "Offering autopopup",
        "system_version_app_Name": "Application version",
        "somc_transport_tor_Name": "Use Tor",
        "client_somc_transports_Name": "Allowed SOMC transport",
        "psc_periods_challenge_Name": "Challenge period",
        "psc_periods_popup_Name": "Popup period",
        "psc_periods_remove_Name": "Remove period",
        "updateDismissVersion_Name": "Dismissed update version",
        "client_min_deposit_Name": "Min. deposit for auto-increase",
        "client_autoincrease_percent_Name": "Percent of total usage for auto-increase",
        "client_autoincrease_deposit_Name": "Auto-increase deposit.",
        "rating_ranking_steps_Name": "Rating ranking steps",
        "error_sendremote_Description": "Allow error reporting to send logs to Privatix.",
        "eth_challenge_period_Description": "Number of blocks to wait from an uncooperativeClose initiated by the Client in order to give the Agent a chance to respond with a balance proof in case the Client cheats. After the challenge period, the Client can settle and delete the channel. Number of blocks Agent will wait from registerServiceOffering or from createChannel before he can delete service offering and recieve Agent's deposit back_",
        "eth_default_gasprice_Description": "Default GAS price for transactions.",
        "eth_event_blocklimit_Description": "Maximum number of ethereum blocks that is used to scan for new events. It is used as pagination mechanism while querying ethereum JSON RPC. If eth.event.blocklimit is null or zero then no pagination is used, which is not recommended.",
        "eth_event_freshblocks_Description": "Defines number of latest ethereum blocks to retrieve. If eth.event.freshblocks is null or zero then all events will be downloaded.",
        "eth_event_maxretry_Description": "Have value (stored as string) that is null or integer and represents how many times event should try to create job, until it is ignored. null or zero considered unlimited.",
        "eth_max_deposit_Description": "We temporarily limit total token deposits in a channel to 300 PRIX. This is just for the bug bounty release, as a safety measure.",
        "eth_min_confirmations_Description": "Have value (stored as string) that is null or integer and represents how many ethereum blocks should be mined after block where transaction of interest exists. As there is non zero probability of attack where some last blocks can be generated by attacker and will be than ignored by ethereum network (uncle blocks) after attack detection. dappctrl give ability to user to specify how many latest blocks are considered non reliable. These last blocks will not be used to fetch events or transactions.",
        "system_version_db_Description": "Version of database.",
        "user_isagent_Description": "Specifies user role. \"true\" - agent. \"false\" - client.",
        "eth_event_lastProcessedBlock_Description": "Last block number in blockchain stores last proccessed block.",
        "offering_autopopup_Description": "Allow offerings to pop up automatically.",
        "system_version_app_Description": "Application version",
        "somc_transport_tor_Description": "Fully decentralized mode. If true use Tor for messaging between Agent and Client. Offerings and access messages will be retrieved via Tor. Messages published through centralised SOMC, will not be available.",
        "psc_periods_challenge_Description": "Number of blocks to be mined to finish uncooperative channel close",
        "psc_periods_popup_Description": "Number of blocks to be mined to repeatedly pop up an offering",
        "psc_periods_remove_Description": "Number of blocks to be mined from last offering update in blockchain to remove offering",
        "client_somc_transports_Description": "This setting defines what SOMC type should be used to display Offering",
        "updateDismissVersion_Description": "Last dismissed update version",
        "client_min_deposit_Description": "This value will override min. deposit proposed by Agent in auto-increase mode, if greater than proposed.",
        "client_autoincrease_percent_Description": "This setting specifies when to increase deposit. Increase deposit, when current usage is equal to this percent of total used units.",
        "client_autoincrease_deposit_Description": "Enable or disable auto-increase mode. Only for client.",
        "rating_ranking_steps_Description": "Number of iterations to compute rank in ratings calculation"
    },
    "copyToClipboard": {
        "Copied": "Copied!",
        "Copy": "Copy"
    },
    "jobName": {
        "clientPreChannelCreate": "place service deposit",
        "clientAfterChannelCreate": "update service data",
        "clientPreChannelTopUp" : "increase deposit",
        "clientAfterChannelTopUp" : "update deposit",
        "clientPreUncooperativeCloseRequest" : "send open contract dispute request",
        "clientAfterUncooperativeCloseRequest" : "open contract dispute",
        "clientPreUncooperativeClose": "get deposit back after challenge period",
        "clientAfterUnCooperativeClose": "finalize dispute and contract close",
        "clientAfterCooperativeClose" : "finalize contract close",
        "clientPreServiceSuspend" : "suspend service",
        "clientPreServiceUnsuspend" : "unsuspend service",
        "clientPreServiceTerminate" : "permanently stop using the service",
        "clientEndpointGet" : "get service access",
        "clientAfterOfferingMsgBCPublish" : "get offering data",
        "clientAfterOfferingPopUp" : "update offering position",
        "clientAfterOfferingDelete" : "remove offering",
        "completeServiceTransition": "complete service transition",
        "agentAfterChannelCreate": "create service entry",
        "agentAfterUncooperativeCloseRequest" : "react on contract dispute",
        "agentAfterCooperativeClose" : "finalize contract close",
        "agentPreServiceSuspend" : "suspend service",
        "agentPreServiceUnsuspend" : "unsuspend service",
        "agentPreServiceTerminate" : "close service and request payment withdrawal",
        "agentPreEndpointMsgCreate" : "prepare service access",
        "agentPreEndpointMsgSOMCPublish" : "publish service access message",
        "agentAfterEndpointMsgSOMCPublish" : "activate service",
        "agentPreOfferingMsgBCPublish" : "send offering deposit",
        "agentAfterOfferingMsgBCPublish" : "offering deposit placed",
        "agentPreOfferingMsgSOMCPublish" : "publish offering message",
        "agentPreOfferingDelete" : "request offering remove and return deposit",
        "agentPreOfferingPopUp" : "request offering popup",
        "agentAfterOfferingPopUp" : "finalize offering popup",
        "agentAfterOfferingDelete" : "finalize offering remove",
        "preAccountAddBalanceApprove" : "approving token transfer to service balance",
        "preAccountAddBalance" : "add PRIX to service balance",
        "afterAccountAddBalance" : "update service balance",
        "preAccountReturnBalance" : "request token transfer to ERC20 account",
        "afterAccountReturnBalance" : "update balance on ERC20 account",
        "accountUpdateBalances" : "check and update account balance info",
        "decrementCurrentSupply": "decrement offering current supply",
        "incrementCurrentSupply": "increment offering current supply"
    },
    "updateInformer": {
        "announcement": "<0>New version <1>{{name}}</1> was released!</0>",
        "GoToUpdate": "Go to update",
        "DoNotShow": "Do not show"
    },
    "tables": {
        "Client": "Client",
        "ClientIP": "Client IP",
        "Agent": "Agent address",
        "Id": "Id",
        "Offering": "Offering",
        "Status": "Status",
        "ContractStatus": "Contract Status",
        "ServiceStatus": "Service Status",
        "JobStatus": "Job status",
        "Usage": "Usage:",
        "CostPRIX": "Cost (PRIX)",
        "IncomePRIX": "Income",
        "Availability": "Availability",
        "Hash": "Hash",
        "Block": "Block",
        "Country": "Country",
        "Price": "Price (PRIX/MB)",
        "MaxUnits": "Max. traffic",
        "AvailableSupply": "Available supply",
        "Supply": "Supply",
        "ServiceName": "Service name",
        "ServiceChangedTime": "Service changed time",
        "LastUsedTime": "Last usage time",
        "Started": "Started",
        "Stopped": "Stopped",
        "Date": "Date",
        "ETH": "ETH",
        "EthereumLink": "Ethereum link",
        "EthereumAddress": "Ethereum address",
        "ExchangeBalance": "Exchange balance",
        "Level": "Level",
        "Message": "Message",
        "Context": "Context",
        "Stack": "Stack",
        "Name": "Name",
        "ServiceBalance": "Service Balance",
        "IsDefault": "Is Default",
        "Actions": "Actions",
        "Rating": "Rating"
    },
    "client/simpleMode" : {
        "selectCountry": "Select country",
        "disconnected": "Disconnected",
        "pingFailed": "Disconnected",
        "connecting": "Connecting",
        "resuming": "Connecting",
        "connected": "Connected",
        "pingLocations": "Search node",
        "disconnecting": "Disconnecting",
        "suspended": "Suspended",
        "jobFailed": "Disconnected",
        "TIME": "TIME",
        "TRAFFIC": "TRAFFIC",
        "SPENT": "SPENT",
        "Connecting": "Connecting",
        "Disconnecting": "Disconnecting",
        "Connect": "Connect",
        "Disconnect": "Disconnect",
        "Resume": "Resume",
        "Balance": "Balance",
        "Address": "Address",
        "SimpleMode": "Simple Mode",
        "AdvancedMode": "advanced mode",
        "SearchingTheOptimalNode": "Searching the optimal node",
        "NoAvailableOfferings": "No available offerings. Please choose another country.",
        "AgentFailed": "Agent failed to provide the service.",
        "HisRating": "His rating will register that.",
        "PleaseTryAgain": "Please, try again.",
        "CountryAlertInvalid": "The country in the offering doesn't match the country that has been detected on the basis of IP address. Service will be terminated and contract will be closed.",
        "PricePerMB": "Price per MB",
        "MaxTraffic": "Max. traffic",
        "FirstDeposit": "First deposit",
        "unusedDepositTip": "Unused deposit will be returned after connection closed",
        "Help": "Help",
        "addFunds": "add funds",
        "addFundsModalTitle": "Add funds",
        "withdrawal": "withdrawal",
        "termsOfUse": "terms of use",
        "footerTextLine0": "Decentralized P2P Bandwidth Marketplace",
        "footerTextLine1": "Privatix Network Core - Client Simple Mode",
        "connectedMsg": "VPN connection has been established",
        "disconnectedMsg": "VPN connection has been disconnected",
        "reconnectMsg": "Connection has been interrupted. Trying to reconnect.",
        "reconnectFailed": "All attempts to reconnect were unsuccessful. Connection is closed."
    },
    "externalLinks/warning" : {
        "warning": "You are going to open external resource",
        "confirmBtn": "Ok",
        "AreYouSure": "Are you sure?"
    },
    "transferTokens": {
        "TransferPRIXNotEnoughETH": "Transfer PRIX to marketplace: not enough ETH.",
        "TransferPRIXCompletedSuccessfully": "Transfer PRIX to marketplace: completed successfully."
    }
}
